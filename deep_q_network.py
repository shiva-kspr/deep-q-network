# -*- coding: utf-8 -*-
"""Deep Q Network.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UtoKQyeORN37OX8cMGDYHuhyNcszMVv2
"""

import numpy as np
from keras import Sequential
from keras.layers import Dense
import random
from collections import deque
import gym
from keras.optimizers import Adam

env = gym.make('CartPole-v0')

state_size = env.observation_space.shape[0]
action_size = env.action_space.n
batch_size = 32

from sys import version
from re import VERBOSE
class DQNAgent:
  def __init__(self, state_size, action_size):
    self.state_size = state_size
    self.action_size = action_size
    self.memory = deque(maxlen = 2000)
    self.gamma = 0.95
    self.epsilon = 1
    self.epsilon_decay = 0.995
    self.epsilon_min = 0.01
    self.learning_rate = 0.001
    self.model = self._build_model()
  def _build_model(self):
    model = Sequential()
    model.add(Dense(24, input_dim=self.state_size, activation='relu'))
    model.add(Dense(24, activation='relu'))
    model.add(Dense(self.action_size, activation='linear'))

    model.compile(loss = 'mse', optimizer=Adam(lr=self.learning_rate))
    return model
  def remember(self, state, action, reward, next_state, done):
    self.memory.append((state, action, reward, next_state, done))
  def act(self, state):
    if np.random.rand() < self.epsilon:
      return random.randrange(self.action_size)
    action_val = self.model.predict(state)
    return np.argmax(action_val[0])
  def replay(self, batch_size):
    minibatch = random.sample(self.memory, batch_size)
    for state, action, reward, next_state, done in minibatch:
      if not done:
        reward = (reward + self.gamma*np.argmax(self.model.predict(next_state)[0]))
      target_f = self.model.predict(state)
      target_f[0][action] = reward
      self.model.fit(state, target_f, epochs = 1, verbose=2)
    if self.epsilon > self.epsilon_min:
      self.epsilon *= self.epsilon_decay

agent = DQNAgent(state_size, action_size)
done = False
for e in range(1001):
  state = env.reset()
  state = np.reshape(state, [1, state_size])
  for time in range(500):
    action = agent.act(state)
    next_state, reward, done, _ = env.step(action)
    reward  = reward if not done else -10
    next_state = np.reshape(next_state, [1, state_size])
    agent.remember(state, action, reward, next_state, done)
    state = next_state
    if done:
      print("episode: {}/{}, score: {}, e: {:.2f}".format(e, 1500, time, agent.epsilon))
      break
  if len(agent.memory) > batch_size:
    agent.replay(batch_size)

